<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 操作系统 | Scutech QA Blog]]></title>
  <link href="http://fencerfan.github.io/blog/categories/cao-zuo-xi-tong/atom.xml" rel="self"/>
  <link href="http://fencerfan.github.io/"/>
  <updated>2013-11-07T20:07:05+08:00</updated>
  <id>http://fencerfan.github.io/</id>
  <author>
    <name><![CDATA[Scutech QA]]></name>
    <email><![CDATA[fencer.ming@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[解决Linux常见的乱码问题]]></title>
    <link href="http://fencerfan.github.io/blog/2013/11/06/e8a7a3e586b3linuxe5b8b8e8a781e79a84e4b9b1e7a081e997aee9a298/"/>
    <updated>2013-11-06T09:40:54+08:00</updated>
    <id>http://fencerfan.github.io/blog/2013/11/06/e8a7a3e586b3linuxe5b8b8e8a781e79a84e4b9b1e7a081e997aee9a298</id>
    <content type="html"><![CDATA[<p>大家使用Linux，主要还是用中文界面，经常碰到中文乱码的情况。下面是常见的乱码解决办法：</p>

<p><strong>1、ssh或者telnet远程登录乱码</strong>
查看环境变量LANG，改成中文编码utf8，试过一下en_US.utf8和zh_CN.utf8都可以，并且设置SSH或者Telnet客户端工具编码，要保持一致。
例如，常见的工具SecureCRT中设置：会话选项&mdash;外观&mdash;字符编码&mdash;utf8</p>

<p><strong>2、图形化窗口中的终端乱码</strong>
修改环境变量LANG即可，用命令LANG=zh_CN.utf8,en_US.utf8也可以，只不过有些字显示的效果不太一样，有的大，有的字体不一样。
另外终端其实也是一个软件，它的编码也要和环境变量LANG的编码要一致。用Ubuntu 12.04举例，在终端的“终端”菜单有一个“设定字符编码”，可设定所需的编码，如UTF-8</p>

<p><strong>3、VIM下的乱码</strong>
这主要和两个因素有关：
一就是文件原始的编码，原始编码的设置是在VIM的配置文件里设置的。
二与终端有关，比如我们在终端显示一个文件，cat /tmp/helloworld.txt，所以终端的编码要和文本原始编码要一致，设置同2。</p>

<p><strong>4、tty登录乱码</strong>
这个需要安装中文接口软件的支持，如zhcon，要安装相应的软件，具体结论还有待实践。</p>

<p><strong>5、将man的内容重定向出现乱码</strong>
用man，我们能够查看到好多有用的信息，但是有时候想把man中的内容保存在文本中，方便以后查看。
比如把iptables的信息保存在iptables.txt中：man iptables > iptables.txt
但是这样操作的结果有时候却差强人意，有好多乱码，解决的办法是：man iptables | col -b > iptables.txt
col的作用是将输入的内容进行转换过滤后输出，-b就是不显示回退键。</p>

<p><strong>6、从windows拷过来的文本文件在Linux下打开出现乱码</strong>
之所以出现乱码是因为windows下中文的编码一般为gbk，而Linux下中文编码一般为 utf8，所以在 windows下正常打开的文件，到Linux下很可能出现乱码。
解决办法：使用命令iconv对文本内容编码进行转换
iconv -f gbk -tutf8 原文本.txt > 新文本.txt
这个方法灰常好用！</p>

<p><strong>7、挂载U盘后，U盘中文目录名或文件名为乱码</strong>
正常挂载：mount /dev/sdb1 /mnt/usb ，然后使用ls /mnt/usb发现U盘上中文目录和文件名都是乱码。
解决办法：在挂载时加上字符集参数 mount -o iocharset=utf8 /dev/sdb1 /mnt/usb</p>

<p><strong>8、从Windows的IE/360等浏览器导出html书签到Linux的Firefox浏览器中文书签名称变成乱码</strong>
从Windows的IE/360等浏览器导出html书签，拷贝到Ubuntu 12.04下，导入后发现中文书签名称全变成乱码。用了很多转换方法都不行，包括把Windows的IE/360等浏览器的字符编码设为跟Linux的Firefox的一致再导出导入，还是有乱码。
最后萌生了一个想法，在Ubuntu下双击html书签，可以打开为网页（因为这是一个html后缀文件），发现书签列表都显示为中文！再尝试把这个网页另存为新的html文件，之后再导入新文件到书签，成功了！问题由此解决～
其他版本的Linux及浏览器有待验证。</p>

<p><strong>9、终端查询日期年月日星期等字符有乱码</strong>
问题：</p>

<h1>date</h1>

<p>2013�� 11�� 06�� ������ 10:04:38 CST
解决办法：</p>

<h1>echo $LANG</h1>

<p>en_US.UTF-8</p>

<h1>LANG=“en_US.UTF-8”</h1>

<h1>echo $LANG</h1>

<p>“en_US.UTF-8”</p>

<h1>date</h1>

<p>Wed Nov  6 13:41:36 CST 2013</p>

<p>还有其他乱码情况，会在以后逐步发现解决，欢迎同学们补充，待续&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[数据的备份，看似很简单其实不简单]]></title>
    <link href="http://fencerfan.github.io/blog/2013/11/05/e695b0e68daee79a84e5a487e4bbbdefbc8ce79c8be4bcbce5be88e7ae80e58d95e585b6e5ae9ee4b88de7ae80e58d95/"/>
    <updated>2013-11-05T14:25:17+08:00</updated>
    <id>http://fencerfan.github.io/blog/2013/11/05/e695b0e68daee79a84e5a487e4bbbdefbc8ce79c8be4bcbce5be88e7ae80e58d95e585b6e5ae9ee4b88de7ae80e58d95</id>
    <content type="html"><![CDATA[<p>转自<a href="http://www.linuxdiyf.com/bbs/thread-308474-1-1.html">http://www.linuxdiyf.com/bbs/thread-308474-1-1.html</a></p>

<p>“备份”是人们进入电脑时代必然遇到的问题，除了个人数据，还有生产生活中其他方面只要涉及到数据安全的皆需备份。
备份除了要求有数据以外，还要确保数据安全性，所以不是一般的复制粘贴或cp能搞定的。
windows下可以用goodsync或其他一些备份工具。
linux中使用rsync可以使备份目录和源目录完全一致：
rsync -auv &mdash;delete &mdash;progress /PATH/备份的文件或目录 /PATH/ //这样即可实现备份到目录PATH下的目的，还能即时看到备份过程，如有错误会在终端返回。
如需传输时进行压缩处理使用参数 -Z ;如需传输时确保数据完全一致可以用参数 -c 。如：
rsync -auv -c &mdash;delete &mdash;progress /PATH/备份的文件或目录 /PATH/ //这样可以在备份时采取HASH校验使备份的数据和原始数据完全一致防止有被恶意篡改（如感染病毒）或磁盘损坏造成数据不一致，只是如果有大量数据校验肯定会拖慢备份速度。</p>

<p>扩展阅读：
1. 如上所述，采取rsync加-c参数可校验数据完整性，但是会拖慢备份速度。其实也可以先备份再采取其他的方法来进行数据校验，如md5sum shaxsun(x=1,256,512等);rsync只是忠实的同步数据，数据不完整一般是上面提到的病毒感染或磁盘损坏（包括文件系统损坏）和一些其它硬件问题如内存损坏造成的，与rsync无关。下面会说到如何校验数据。
首先：cd到备份源目录中，递归建立一个有备份目录所有数据的hash文档;校验时这个文件要一并复制到备份目的目录的同级目录中以做校验用。
find -type f -print0 | xargs -0 md5sum >|/path/md5 //md5这个文件名可以任意指定
校验： md5sum -c md5 //如无意外，在一大片“确定”后即返回终端，如有不符的则返回错误提示。
md5sum -c md5 >/path/hash //把校验结果输出到一个名为hash的文件中，可以通过查询该文件得知具体出错的文件是那几个，避免因快速刷屏看不到究竟是哪几个文件没有同步完整。
cat /path/hash | grep 失败 //查询到出错的具体文件，如无错误则直接返回终端</p>

<ol>
<li><p>由于备份通常使用USB或esata等接口来进行数据传输，难免因为机器故障导致数据不完整，常见的就是写缓存和设备占用无法移除而采取了暴力移除的方法。这样直接导致数据未写完，轻则当前数据不完整，重则破坏文件系统造成更大的损失。
windows中可以用微软工具包里面有个 sync.exe 的工具来完成回写;若仍无法移除的则要保存其他工作后注销系统再拔除设备。
linux中：当然也会出现写缓存和不能安全移除设备的问题，不过解决很简单，sync（回写）、然后 umount 卸载挂载目录即可直接拔除了。</p></li>
<li><p>要经常检查文件系统
windows：使用chkdsk或图形的方法，（以XP为例）打开磁盘管理-右击某希望检查的分区-属性-工具-开始检查-勾选（自动修复文件系统错误和扫描并试图恢复坏扇区）-然后开始查错
linux：umount 卸载挂载点（必须的，目的是让fsck独占设备避免检测时其他程序还在读写从而造成数据错误）后根据备份磁盘的文件系统类型进行fsck 例：
一般mbr的磁盘可以用 sudo fdisk -l 来查询到设备号，gpt磁盘可以用 parted /dev/sdx (x=b、c、d&hellip;)然后按p来查询，或其他工具。
sudo fsck -t ext4 /dev/sdb1 //检查一个设备识别为/dev/sdb1的，ext4文件系统的磁盘。
sudo ntfsfix /dev/sdb1 //检查一个ntfs分区的设备</p></li>
</ol>


<p>结语:从插入设备开始备份到校验数据整个过程完成才能称做一次完整的备份过程。本人就因为内存损坏致使同步数据总是有问题，幸好明白数据要校验这个道理才能保证数据安全性，否则备份到头来成了做无用功。校验的时候没问题最好，若有问题则要考虑上面提到的因素。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux的分区类型]]></title>
    <link href="http://fencerfan.github.io/blog/2013/07/05/linuxe79a84e58886e58cbae7b1bbe59e8b/"/>
    <updated>2013-07-05T17:01:44+08:00</updated>
    <id>http://fencerfan.github.io/blog/2013/07/05/linuxe79a84e58886e58cbae7b1bbe59e8b</id>
    <content type="html"><![CDATA[<p>测试鼎甲奥备需要多了解这方面的内容。</p>

<p><strong>一、分区类型</strong></p>

<p>1、/分区。用于存储系统文件。
2、swap，即交换分区，也是一种文件系统，它的作用是作为Linux的虚拟内存。
在Windows下，虚拟内存是一个文件：pagefile.sys；而Linux下，虚拟内存需要使用独立分区，这样做的目的据说是为了提高虚拟内存的性能。
3、/home：是用户文件夹所在的地方。如果独立划分/home，即使Ubuntu不能启动，也可以用Live CD启动来取得自己的文件资料。
4、/boot：包含了操作系统的内核和在启动系统过程中所要用到的文件。
在很多老旧的教程中，都会让用户在/boot目录上挂载一个大小为100MB左右的独立分区，并推荐把该/boot放在硬盘的前面——即1024柱面之前。事实上，那是Lilo无法引导1024柱面后的操作系统内核的时代的遗物了。当然，也有人说，独立挂载/boot的好处是可以让多个Linux共享一个/boot。
其实，无论是基于上述的哪种理由，都没有必要把/boot分区独立出来。首先，Grub可以引导1024柱面后的Linux内核；其次，即使是安装有多个Linux，也完全可以不共享/boot。因为/boot目录的大小通常都非常小，大约20MB，分一个100MB的分区无疑是一种浪费，而且还把把硬盘分的支离破碎的，不方便管理。另外，如果让两个Linux共享一个/boot，每次升级内核，都会导致Grub的配置文件冲突，带来不必要的麻烦。而且，不独立/boot分区仅仅占用了根目录下的大约20MB左右的空间，根本不会对根目录的使用造成任何影响。
但值得注意的是，随着硬盘容量的增大，无法引导Linux内核的现象再次出现，这也就是著名的137GB限制。很遗憾，Grub是无法引导137GB之后的分区中的Linux内核的。如果你不巧遇到了这样的情况，你就要考虑把/boot独立挂载到位于137GB前方的独立分区中，或者索性就把 Linux的分区都往前移动，让根目录所在分区位于137GB之前。
5、/usr/local：是 Linux系统存放软件的地方。
建议把/opt，/usr或/usr/local独立出来的教程，基本上也是非常老的了。使用Ubuntu时，我们一般都是使用系统的软件包管理器安装软件，很少自己编译安装软件。而建议独立/usr，/opt，/usr/local的理由无非是为了重装系统时不再重新编译软件而直接使用早先编译的版本。不过对于大多数普通用户来说，这个建议通常是没有意义的。
6、/var：是系统日志记录分区。
7、/tmp分区，用来存放临时文件。
建议把/var和/tmp独立出来的教程通常是面向服务器的。因为高负载的服务器通常会产生很多日志文件、临时文件，这些文件经常改变，因此把/var，/tmp独立出来有利于提高服务器性能。但如果你用Ubuntu是做桌面的，或从来不关心过系统日志这东西，就没有必要独立的为/var和/tmp挂载分区。</p>

<p>还有些老旧的教程中建议把Linux安装在主分区中，或在/boot下挂载一个主分区。事实上，这也是不需要的。Linux的所有分区都可以位于逻辑分区中。所以请放心的把Linux安装在逻辑分区中吧。</p>

<p><strong>二、文件系统（分区格式）</strong></p>

<p>Linux的文件系统（分区格式）主要有ext3、ReiserFS、XFS、JFS等。同时Linux也可以读写使用FAT、FAT32和NTFS文件系统的分区。</p>

<p>Ubuntu默认的文件系统是ext3。</p>

<p>或许有人会告诉你其他文件系统会有什么什么优点，ext3会有什么什么不好，但如果你对文件系统并不了解的话，我的建议就是使用默认的ext3，默认的设置可能不一定是性能最好的，但对普通用户一定是最稳定最安全最适合的。</p>

<p>最大分区大小：ext3是4TB，ReiseFS是16TB。FAT32在Windows XP和Windows 2000里的最大分区是32GB；而Linux中的FAT32则可以支持到2TB。
最大文件大小：ext3是2GB－4GB，ReiseFS是8TB，FAT32是4GB。</p>

<p><strong>三、安装Linux的分区划分方案建议</strong></p>

<p>1、只安装一个Ubuntu
如果你准备在硬盘里只安装Ubuntu一个操作系统的话，建议你采用三分区方案：
1）“/”分区：使用ext3文件系统；分区容量为10GB－15GB。
2）“swap”分区：用于交换空间。内存小于或等于 512MB，swap分区容量为内存大小的2倍；内存大于512MB的，swap分区容量等于内存大小。
3）“/home”分区：使用ext3文件系统；分区容量为“/”和“swap”以外的剩余空间</p>

<p>在linux系统中至少必须有两个挂载点(磁盘分区)，分别是 / 及 swap ，其余是否要将其他的挂载点独立分割出来则视你的规划需求而定。可参考以下建议：</p>

<p>swap的大小约等同你的内存大小，或稍大</p>

<p>2、初次接触的新手或硬盘空间有限 Desktop的安装建议：
挂载点 装置 说明
/ /dev/hda1 可用空间 &ndash; swap大小后的所有空间
swap /dev/hda2 大约内存大小 建议至少512Mb</p>

<p>3、高级用户 Desktop的安装建议：
挂载点 装置 说明
/ /dev/hda1 15G
/home /dev/hda2 最大的剩余空间
/boot /dev/hda3 128MB左右
swap /dev/hda5 大约内存大小(建议至少512MB)</p>

<p>4、高级用户 Server的安装建议：
挂载点 装置 说明
/ /dev/hda1 15G
/home /dev/hda2 最大的剩余空间
/boot /dev/hda3 128MB左右
swap /dev/hda5 大约内存大小(建议至少512MB)
/var /dev/hda6 视服务器功能决定大小</p>

<p><strong>四、分区号简要说明</strong></p>

<p>Linux 规定了主分区（Primary）以及扩展分区（extend）占用 1 至 16 号码中的前 4 个号码。以第一个 IDE 硬盘为例说明，主分区以及扩展分区占用了 hda1、hda2、hda3、hda4（该号一般为扩展分区所用），而逻辑分区占用了 hda5 到 hda16 等 12 个号码。因此，Linux 下面每一个硬盘总共最多有 16 个分区。
因此 hda1- hda4 是主区的意思。 hda5以后是逻辑分区！！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux系统内存监控全面讲解：free命令]]></title>
    <link href="http://fencerfan.github.io/blog/2013/05/23/linuxe7b3bbe7bb9fe58685e5ad98e79b91e68ea7e585a8e99da2e8aeb2e8a7a3efbc9afreee591bde4bba4/"/>
    <updated>2013-05-23T10:30:54+08:00</updated>
    <id>http://fencerfan.github.io/blog/2013/05/23/linuxe7b3bbe7bb9fe58685e5ad98e79b91e68ea7e585a8e99da2e8aeb2e8a7a3efbc9afreee591bde4bba4</id>
    <content type="html"><![CDATA[<p>在Windows系统中查看内存的使用情况很简单，想必大家都已经耳熟能详了，那么在Linux系统如何查看内存使用情况呢？下面和大家分享在Linux系统下查看内存使用情况的free命令：</p>

<p>[root@scs-2 tmp]# free
total used free shared buffers cached
Mem: 3266180 3250004 16176 0 110652 2668236
&ndash;/+ buffers/cache: 471116 2795064
Swap: 2048276 80160 1968116</p>

<p>下面是对这些数值的解释：</p>

<p>total:总计物理内存的大小。</p>

<p>used:已使用多大。</p>

<p>free:可用有多少。</p>

<p>Shared:多个进程共享的内存总额。</p>

<p>Buffers/cached:磁盘缓存的大小。</p>

<p>第三行(&ndash;/+ buffers/cached):</p>

<p>used:已使用多大。</p>

<p>free:可用有多少。</p>

<p>第四行就不多解释了。</p>

<p>区别：第二行(mem)的used/free与第三行(&ndash;/+ buffers/cache) used/free的区别。 这两个的区别在于使用的角度来看，第一行是从OS的角度来看，因为对于OS，buffers/cached 都是属于被使用，所以他的可用内存是16176KB,已用内存是3250004KB,其中包括，内核（OS）使用+Application(X, oracle,etc)使用的+buffers+cached.</p>

<p>第三行所指的是从应用程序角度来看，对于应用程序来说，buffers/cached 是等于可用的，因为buffer/cached是为了提高文件读取的性能，当应用程序需在用到内存的时候，buffer/cached会很快地被回收。</p>

<p><a href="http://blog.chinaunix.net/uid-10697776-id-3292165.html">Linux Buffers和Cached的区别</a>：</p>

<p>buffers是为块设备设计的缓冲。比如磁盘读写，把分散的写操作集中进行，减少磁盘I/O，从而提高系统性能。比如入U盘里cp一个文件，但是U盘读写指示灯未闪动，过了一会儿才闪动。卸载时会清空缓冲，所以有时卸载一个设备需要等待几秒。</p>

<p>    cached是缓存读取过的内容，下次再读时，如果在缓存中命中，则直接从缓存读取，否则读取磁盘。由于缓存空间有限，过一段时间以后没用的缓存会被移动到swap里面，所以有时看到物理内存还有很多，swap就被利用了。</p>

<p>所以从应用程序的角度来说，可用内存=系统free memory+buffers+cached。</p>

<p>如上例：</p>

<p>2795064=16176+110652+2668236</p>

<p>接下来解释什么时候内存会被交换，以及按什么方交换。 当可用内存少于额定值的时候，就会开会进行交换。</p>

<p>如何看额定值：</p>

<p>cat /proc/meminfo
[root@scs-2 tmp]# cat /proc/meminfo
MemTotal: 3266180 kB
MemFree: 17456 kB
Buffers: 111328 kB
Cached: 2664024 kB
SwapCached: 0 kB
Active: 467236 kB
Inactive: 2644928 kB
HighTotal: 0 kB
HighFree: 0 kB
LowTotal: 3266180 kB
LowFree: 17456 kB
SwapTotal: 2048276 kB
SwapFree: 1968116 kB
Dirty: 8 kB
Writeback: 0 kB
Mapped: 345360 kB
Slab: 112344 kB
Committed_AS: 535292 kB
PageTables: 2340 kB
VmallocTotal: 536870911 kB
VmallocUsed: 272696 kB
VmallocChunk: 536598175 kB
HugePages_Total: 0
HugePages_Free: 0
Hugepagesize: 2048 kB</p>

<p>用free -m查看的结果：</p>

<p>[root@scs-2 tmp]# free -m
total used free shared buffers cached
Mem: 3189 3173 16 0 107 2605
&ndash;/+ buffers/cache: 460 2729
Swap: 2000 78 1921</p>

<p>查看/proc/kcore文件的大小（内存镜像）：</p>

<p>[root@scs-2 tmp]# ll -h /proc/kcore
-r——– 1 root root 4.1G Jun 12 12:04 /proc/kcore</p>

<p>备注：占用内存的测量</p>

<p>测量一个进程占用了多少内存，Linux系统为我们提供了一个很方便的方法，/proc目录为我们提供了所有的信息，实际上top等工具也通过这里来获取相应的信息。</p>

<p>/proc/meminfo 机器的内存使用信息
/proc/pid/maps pid为进程号，显示当前进程所占用的虚拟地址。
/proc/pid/statm 进程所占用的内存
[root@localhost ~]# cat /proc/self/statm
654 57 44 0 0 334 0</p>

<p>输出解释</p>

<p>CPU 以及CPU0。。。的每行的每个参数意思（以第一行为例）为：</p>

<p>参数 解释 /proc//status</p>

<p>Size (pages) 任务虚拟地址空间的大小 VmSize/4</p>

<p>Resident(pages) 应用程序正在使用的物理内存的大小 VmRSS/4</p>

<p>Shared(pages) 共享页数 0</p>

<p>Trs(pages) 程序所拥有的可执行虚拟内存的大小 VmExe/4</p>

<p>Lrs(pages) 被映像到任务的虚拟内存空间的库的大小 VmLib/4</p>

<p>Drs(pages) 程序数据段和用户态的栈的大小 （VmData+ VmStk ）4</p>

<p>dt(pages) 04</p>

<p>查看机器可用内存</p>

<p>/proc/28248/>free
total used free shared buffers cached
Mem: 1023788 926400 97388 0 134668 503688
&ndash;/+ buffers/cache: 288044 735744
Swap: 1959920 89608 1870312</p>

<p>我们通过free命令查看机器空闲内存时，会发现free的值很小。这主要是因为，在Linux系统中有这么一种思想，内存不用白不用，因此它尽可能的cache和buffer一些数据，以方便下次使用。但实际上这些内存也是可以立刻拿来使用的。</p>

<p>所以 空闲内存=free+buffers+cached=total-used</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linux下.sh文件语法]]></title>
    <link href="http://fencerfan.github.io/blog/2013/04/03/linuxe4b88b-she69687e4bbb6e8afade6b395/"/>
    <updated>2013-04-03T16:56:49+08:00</updated>
    <id>http://fencerfan.github.io/blog/2013/04/03/linuxe4b88b-she69687e4bbb6e8afade6b395</id>
    <content type="html"><![CDATA[<p><strong>一、开头</strong>
程序必须以下面的行开始（必须方在文件的第一行）：</p>

<h1>!/bin/sh</h1>

<p>符号#!用来告诉系统它后面的参数是用来执行该文件的程序。在这个例子中我们使用/bin/sh来执行程序。</p>

<p>当编写脚本完成时，如果要执行该脚本，还必须使其可执行。要使编写脚本可执行：
编译 chmod +x filename 这样才能用./filename 来运行</p>

<p><strong>二、注释</strong>
在进行shell编程时，以#开头的句子表示注释，直到这一行的结束。我们真诚地建议您在程序中使用注释。
如果您使用了注释，那么即使相当长的时间内没有使用该脚本，您也能在很短的时间内明白该脚本的作用及工作原理。</p>

<p><strong>三、变量</strong>
在其他编程语言中您必须使用变量。在shell编程中，所有的变量都由字符串组成，并且您不需要对变量进行声明。要赋值给一个变量，您可以这样写：</p>

<h1>!/bin/sh</h1>

<h1>对变量赋值：</h1>

<p>a=”hello world”</p>

<h1>现在打印变量a的内容：</h1>

<p>echo “A is:”
echo $a
有时候变量名很容易与其他文字混淆，比如：
num=2
echo “this is the $numnd”
这并不会打印出”this is the 2nd”，而仅仅打印”this is the “，因为shell会去搜索变量numnd的值，但是这个变量时没有值的。可以使用花括号来告诉shell我们要打印的是num变量：
num=2
echo “this is the ${num}nd”
这将打印： this is the 2nd</p>

<p><strong>四、环境变量</strong>
由export关键字处理过的变量叫做环境变量。我们不对环境变量进行讨论，因为通常情况下仅仅在登录脚本中使用环境变量。</p>

<p><strong>五、Shell命令和流程控制</strong>
在shell脚本中可以使用三类命令：</p>

<p><strong>1、Unix 命令:</strong>
虽然在shell脚本中可以使用任意的unix命令，但是还是由一些相对更常用的命令。这些命令通常是用来进行文件和文字操作的。
常用命令语法及功能
echo “some text”: 将文字内容打印在屏幕上
ls: 文件列表
wc –l filewc -w filewc -c file: 计算文件行数计算文件中的单词数计算文件中的字符数
cp sourcefile destfile: 文件拷贝
mv oldname newname : 重命名文件或移动文件
rm file: 删除文件
grep ‘pattern’ file: 在文件内搜索字符串比如：grep ’searchstring’ file.txt
cut -b colnum file: 指定欲显示的文件内容范围，并将它们输出到标准输出设备比如：输出每行第5个到第9个字符cut -b5-9 file.txt千万不要和cat命令混淆，
这是两个完全不同的命令
cat file.txt: 输出文件内容到标准输出设备（屏幕）上
file somefile: 得到文件类型
read var: 提示用户输入，并将输入赋值给变量
sort file.txt: 对file.txt文件中的行进行排序
uniq: 删除文本文件中出现的行列比如： sort file.txt | uniq
expr: 进行数学运算Example: add 2 and 3expr 2 “+” 3
find: 搜索文件比如：根据文件名搜索find . -name filename -print
tee: 将数据输出到标准输出设备(屏幕) 和文件比如：somecommand | tee outfile
basename file: 返回不包含路径的文件名比如： basename /bin/tux将返回 tux
dirname file: 返回文件所在路径比如：dirname /bin/tux将返回 /bin
head file: 打印文本文件开头几行
tail file : 打印文本文件末尾几行
sed: Sed是一个基本的查找替换程序。可以从标准输入（比如命令管道）读入文本，并将
结果输出到标准输出（屏幕）。该命令采用正则表达式（见参考）进行搜索。不要和shell中的通配符相混淆。比如：将linuxfocus替换为 LinuxFocus ：cat text.file | sed ’s/linuxfocus/LinuxFocus/’ >newtext.fileawk: awk 用来从文本文件中提取字段。缺省地，字段分割符是空格，可以使用-F指定其他分割符。
catfile.txt | awk -F, ‘{print $1 “,” $3}’这里我们使用，作为字段分割符，同时打印第一个和第三个字段。如果该文件内容如下： Adam Bor, 34, IndiaKerryMiller, 22, USA命令输出结果为：Adam Bor, IndiaKerry Miller, USA</p>

<p><strong>2、概念: 管道, 重定向和 backtick</strong>
这些不是系统命令，但是他们真的很重要。
管道 (|) 将一个命令的输出作为另外一个命令的输入。
grep “hello” file.txt | wc -l
在file.txt中搜索包含有”hello”的行并计算其行数。
在这里grep命令的输出作为wc命令的输入。当然您可以使用多个命令。
重定向：将命令的结果输出到文件，而不是标准输出（屏幕）。</p>

<blockquote><p>写入文件并覆盖旧文件</p>

<blockquote><p>加到文件的尾部，保留旧文件内容。
反短斜线
使用反短斜线可以将一个命令的输出作为另外一个命令的一个命令行参数。
命令：
find . -mtime -1 -type f -print
用来查找过去24小时（-mtime –2则表示过去48小时）内修改过的文件。如果您想将所有查找到的文件打一个包，则可以使用以下linux 脚本：</p>

<h1>!/bin/sh</h1>

<h1>The ticks are backticks (`) not normal quotes (‘):</h1>

<p>tar -zcvf lastmod.tar.gz <code>find . -mtime -1 -type f -print</code></p></blockquote></blockquote>

<p><strong>3、流程控制</strong>
“if” 表达式 如果条件为真则执行then后面的部分：
if ….; then
….
elif ….; then
….
else
….
fi
大多数情况下，可以使用测试命令来对条件进行测试。比如可以比较字符串、判断文件是否存在及是否可读等等…
通常用” [ ] “来表示条件测试。注意这里的空格很重要。要确保方括号的空格。
[ -f &ldquo;somefile&rdquo; ] ：判断是否是一个文件
[ -x &ldquo;/bin/ls&rdquo; ] ：判断/bin/ls是否存在并有可执行权限
[ -n &ldquo;$var&rdquo; ] ：判断$var变量是否有值
[ &ldquo;$a&rdquo; = &ldquo;$b&rdquo; ] ：判断$a和$b是否相等
执行man test可以查看所有测试表达式可以比较和判断的类型。
直接执行以下脚本：</p>

<h1>!/bin/sh</h1>

<p>if [ &ldquo;$SHELL&rdquo; = &ldquo;/bin/bash&rdquo; ]; then
echo “your login shell is the bash (bourne again shell)”
else
echo “your login shell is not bash but $SHELL”
fi
变量$SHELL包含了登录shell的名称，我们和/bin/bash进行了比较。
快捷操作符
熟悉C语言的朋友可能会很喜欢下面的表达式：
[ -f &ldquo;/etc/shadow&rdquo; ] &amp;&amp; echo “This computer uses shadow passwors”
这里 &amp;&amp; 就是一个快捷操作符，如果左边的表达式为真则执行右边的语句。
您也可以认为是逻辑运算中的与操作。上例中表示如果/etc/shadow文件存在则打印” This computer uses shadow passwors”。同样或操作(||)在shell编程中也是可用的。这里有个例子：</p>

<h1>!/bin/sh</h1>

<p>mailfolder=/var/spool/mail/james
[ -r &ldquo;$mailfolder&rdquo; ]‘ ‘{ echo “Can not read $mailfolder” ; exit 1; }
echo “$mailfolder has mail from:”
grep “<sup>From</sup> ” $mailfolder
该脚本首先判断mailfolder是否可读。如果可读则打印该文件中的”From” 一行。如果不可读则或操作生效，打印错误信息后脚本退出。这里有个问题，那就是我们必须有两个命令：
◆打印错误信息
◆退出程序
我们使用花括号以匿名函数的形式将两个命令放到一起作为一个命令使用。一般函数将在下文提及。
不用与和或操作符，我们也可以用if表达式作任何事情，但是使用与或操作符会更便利很多。</p>
]]></content>
  </entry>
  
</feed>
